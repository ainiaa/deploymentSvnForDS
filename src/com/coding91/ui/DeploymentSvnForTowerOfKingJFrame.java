package com.coding91.ui;

import com.coding91.utility.ControllerJFrame;
import com.coding91.utility.MessageUtil;
import com.coding91.utility.SVNWorkingCopyManager;
import com.coding91.utility.TortoiseProcUtil;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.tmatesoft.svn.core.SVNDepth;
import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.wc.SVNRevision;
import sync.Sync;

/**
 *
 * @author Administrator
 */
public class DeploymentSvnForTowerOfKingJFrame extends javax.swing.JFrame {

    private List<JCheckBox> envjCheckBoxList;
    private Map<String, String> envInitStatusMap;

    /**
     * 初始化列表
     */
    private void initEnvList() {
        envjCheckBoxList = new ArrayList<>();
        envInitStatusMap = new HashMap<>();
        envjCheckBoxList.add(fBEnUsJCheckBox);
        envjCheckBoxList.add(fBFrfrJCheckBox);
        envjCheckBoxList.add(fBDedeJCheckBox);
        envjCheckBoxList.add(aGEnUsJCheckBox);
        envjCheckBoxList.add(kGEnUsJCheckBox);

        envInitStatusMap.put(fBEnUsJCheckBox.getName(), "NO");
        envInitStatusMap.put(fBFrfrJCheckBox.getName(), "NO");
        envInitStatusMap.put(fBDedeJCheckBox.getName(), "NO");
        envInitStatusMap.put(aGEnUsJCheckBox.getName(), "NO");
        envInitStatusMap.put(kGEnUsJCheckBox.getName(), "NO");
    }

    /**
     * Creates new form deploymentSvnForDS
     */
    public DeploymentSvnForTowerOfKingJFrame() {

        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        this.setIconImage(Toolkit.getDefaultToolkit().getImage(
                getClass().getClassLoader().getResource("resources/images/sync.png")));//这个不能以 '/'开头
        //下面的方式可以设置成功
//        ImageIcon iconImage = SwingResourceManager.getIcon(DeploymentSvnForDS.class, "/resources/images/sync.png");
//        this.setIconImage(iconImage.getImage());

        initComponents();

        initEnvList();

        try {
            printer();
        } catch (IOException ex) {
            Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        syncjScrollPane = new javax.swing.JScrollPane();
        jToolBar1 = new javax.swing.JToolBar();
        contentjPanel = new javax.swing.JPanel();
        syncResourcesjButton = new javax.swing.JButton();
        syncFlashjButton = new javax.swing.JButton();
        commitResourcesjButton = new javax.swing.JButton();
        commitFlashjButton = new javax.swing.JButton();
        commitPHPjButton = new javax.swing.JButton();
        syncPHPjButton = new javax.swing.JButton();
        environmentjPanel = new javax.swing.JPanel();
        FBEnUsJComboBox = new javax.swing.JComboBox();
        FBEnUsJTextField = new javax.swing.JTextField();
        FBFrfrJTextField = new javax.swing.JTextField();
        FBFrfrJComboBox = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        FBDedeJComboBox = new javax.swing.JComboBox();
        AGEnUsJTextField = new javax.swing.JTextField();
        AGEnUsJComboBox = new javax.swing.JComboBox();
        KGEnUsJTextField = new javax.swing.JTextField();
        KGEnUsJComboBox = new javax.swing.JComboBox();
        fBEnUsJCheckBox = new javax.swing.JCheckBox();
        kGEnUsJCheckBox = new javax.swing.JCheckBox();
        fBDedeJCheckBox = new javax.swing.JCheckBox();
        aGEnUsJCheckBox = new javax.swing.JCheckBox();
        fBFrfrJCheckBox = new javax.swing.JCheckBox();
        jMenuBar = new javax.swing.JMenuBar();
        filejMenu = new javax.swing.JMenu();
        syncResourcesjMenuItem = new javax.swing.JMenuItem();
        editjMenu = new javax.swing.JMenu();
        editConfjMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        syncjScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步结果", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(255, 0, 255))); // NOI18N
        syncjScrollPane.setAutoscrolls(true);

        jToolBar1.setRollover(true);

        contentjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步内容", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(153, 51, 255))); // NOI18N

        syncResourcesjButton.setText("开始同步 resources");
        syncResourcesjButton.setEnabled(false);
        syncResourcesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncResourcesjButtonActionPerformed(evt);
            }
        });

        syncFlashjButton.setText("开始同步 flash");
        syncFlashjButton.setEnabled(false);
        syncFlashjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncFlashjButtonActionPerformed(evt);
            }
        });

        commitResourcesjButton.setText("提交resource到svn");
        commitResourcesjButton.setEnabled(false);
        commitResourcesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitResourcesjButtonActionPerformed(evt);
            }
        });

        commitFlashjButton.setText("提交flash到svn");
        commitFlashjButton.setEnabled(false);
        commitFlashjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitFlashjButtonActionPerformed(evt);
            }
        });

        commitPHPjButton.setText("提交PHP到svn");
        commitPHPjButton.setEnabled(false);
        commitPHPjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitPHPjButtonActionPerformed(evt);
            }
        });

        syncPHPjButton.setText("开始同步 PHP");
        syncPHPjButton.setEnabled(false);
        syncPHPjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncPHPjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentjPanelLayout = new javax.swing.GroupLayout(contentjPanel);
        contentjPanel.setLayout(contentjPanelLayout);
        contentjPanelLayout.setHorizontalGroup(
            contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(syncResourcesjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(commitResourcesjButton)
                .addGap(18, 18, 18)
                .addComponent(syncFlashjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commitFlashjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syncPHPjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commitPHPjButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentjPanelLayout.setVerticalGroup(
            contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(syncResourcesjButton)
                    .addComponent(syncFlashjButton)
                    .addComponent(commitResourcesjButton)
                    .addComponent(commitFlashjButton)
                    .addComponent(syncPHPjButton)
                    .addComponent(commitPHPjButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        environmentjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步环境", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        fBEnUsJCheckBox.setText("FB en_us:");
        fBEnUsJCheckBox.setName("fb_en_us"); // NOI18N
        fBEnUsJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fBEnUsJCheckBoxActionPerformed(evt);
            }
        });

        kGEnUsJCheckBox.setText("KG en_us:");
        kGEnUsJCheckBox.setName("kg_en_us"); // NOI18N
        kGEnUsJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kGEnUsJCheckBoxActionPerformed(evt);
            }
        });

        fBDedeJCheckBox.setText("FB de_de:");
        fBDedeJCheckBox.setName("fb_de_de"); // NOI18N
        fBDedeJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fBDedeJCheckBoxActionPerformed(evt);
            }
        });

        aGEnUsJCheckBox.setText("AG en_us:");
        aGEnUsJCheckBox.setName("ag_en_us"); // NOI18N
        aGEnUsJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aGEnUsJCheckBoxActionPerformed(evt);
            }
        });

        fBFrfrJCheckBox.setText("FB fr_fr:");
        fBFrfrJCheckBox.setName("fb_fr_fr"); // NOI18N
        fBFrfrJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fBFrfrJCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout environmentjPanelLayout = new javax.swing.GroupLayout(environmentjPanel);
        environmentjPanel.setLayout(environmentjPanelLayout);
        environmentjPanelLayout.setHorizontalGroup(
            environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(environmentjPanelLayout.createSequentialGroup()
                        .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kGEnUsJCheckBox)
                            .addComponent(fBDedeJCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KGEnUsJComboBox, 0, 116, Short.MAX_VALUE)
                            .addComponent(FBDedeJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(environmentjPanelLayout.createSequentialGroup()
                        .addComponent(fBEnUsJCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FBEnUsJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField3)
                        .addComponent(KGEnUsJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                    .addComponent(FBEnUsJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77)
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(environmentjPanelLayout.createSequentialGroup()
                        .addComponent(aGEnUsJCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AGEnUsJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(environmentjPanelLayout.createSequentialGroup()
                        .addComponent(fBFrfrJCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FBFrfrJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FBFrfrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AGEnUsJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(134, 134, 134))
        );
        environmentjPanelLayout.setVerticalGroup(
            environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentjPanelLayout.createSequentialGroup()
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FBEnUsJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FBEnUsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FBFrfrJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FBFrfrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fBEnUsJCheckBox)
                    .addComponent(fBFrfrJCheckBox))
                .addGap(18, 18, 18)
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FBDedeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AGEnUsJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AGEnUsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fBDedeJCheckBox)
                    .addComponent(aGEnUsJCheckBox))
                .addGap(18, 18, 18)
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KGEnUsJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KGEnUsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kGEnUsJCheckBox))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        filejMenu.setText("文件");

        syncResourcesjMenuItem.setText("同步");
        syncResourcesjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncResourcesjMenuItemActionPerformed(evt);
            }
        });
        filejMenu.add(syncResourcesjMenuItem);

        jMenuBar.add(filejMenu);

        editjMenu.setText("编辑");

        editConfjMenuItem.setText("修改配置项");
        editConfjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConfjMenuItemActionPerformed(evt);
            }
        });
        editjMenu.add(editConfjMenuItem);

        jMenuBar.add(editjMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(syncjScrollPane)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(environmentjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contentjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(environmentjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(contentjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(syncjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        syncjScrollPane.getAccessibleContext().setAccessibleName("sync result");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public List<String> getEnv() {
        List<String> envList = new ArrayList<>();
        for (JCheckBox envJCheckBox : envjCheckBoxList) {
            if (envJCheckBox.isSelected()) {
                envList.add(envJCheckBox.getName());
            }
        }
        return envList;
    }

    /**
     * 获得 PHP tag号
     *
     * @return
     */
    public Map<String, String> getPHPSync() {
        Map<String, String> phpSyncMap = new HashMap<>();
//        phpSyncMap.put("origin", originPHPTagjTextField.getText().trim());//源php tag号
//        phpSyncMap.put("dest", dstPHPTagjTextField.getText().trim());//目标 tag号
        return phpSyncMap;
    }

    private static void showMessageDialogMessage(Exception ex) {
        String exMsg = ex.toString();
        JOptionPane.showMessageDialog(null, exMsg + new Throwable().getStackTrace()[1].toString(), "错误信息提示", JOptionPane.ERROR_MESSAGE);
    }

    private static void showMessageDialogMessage(String msg, String title) {
        JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    private static void showMessageDialogMessage(String msg) {
        JOptionPane.showMessageDialog(null, msg, "错误信息提示", JOptionPane.ERROR_MESSAGE);
    }

    private String getLocalPathKey(int version, boolean isOnline) {

        if (isOnline) {
            if (version == 0) {//a版本
                return "php.online.sysfile.path";
            } else if (version == 1) {//b版本
                return "php.online.sysfile.path";
            }
        } else {
            if (version == 0) {//a版本
                return "php.local.sysfile.path";
            } else if (version == 1) {//b版本
                return "php.local.sysfile.path";
            }
        }
        return "";
    }

    private Map<String, String> buildFileSyncArgs(String source, String target) {
        Map<String, String> args = new HashMap<>();
        args.put("source", source);
        args.put("target", target);
//        args.put("force", "y");//不能删除 
        args.put("rename", "n");
        args.put("synctime", "n");
        args.put("overwrite", "y");
        args.put("customExclude", "{.git,.idea,.svn,.settings,.project,.buildpath}");//忽略.git,.idea,.svn,.settings,.project,.buildpath文件      {.git,.idea,*.php} 忽略 .git  .idea 和 .php文件
        args.put("path", "1");
        return args;
    }

    /**
     * 是否需要创建 A 版本分支
     *
     * @param env
     * @param svnWorkingCopyManager
     * @return
     */
    public boolean needCreateAVersionOfPHPBranch(String env, SVNWorkingCopyManager svnWorkingCopyManager) {
        return svnWorkingCopyManager.getProperties(env).get("withABVersion").toString().equals("1");
    }

    /**
     * 创建PHP分支
     *
     * @param svnWorkingCopyManager
     * @param originTag
     * @param dstTag
     * @param env
     * @param version
     */
    public static void createPHPBranchByTag(SVNWorkingCopyManager svnWorkingCopyManager, String originTag, String dstTag, String env, int version) {
        try {
            String commitMessage = String.format("remotely create PHP Branch/Tag '%s' to '%s' ", originTag, dstTag);
            svnWorkingCopyManager.createBranchOrTagByEnvConf(env, originTag, dstTag, commitMessage, true, version);
        } catch (SVNException svne) {
            MessageUtil.showMessageDialogMessage(String.format("remotely create PHP Branch/Tag '%s' to '%s'  error: %s\r\n", originTag, dstTag, svne.getErrorMessage()));
            System.exit(-1);
        }
    }
    
    
    /**
     * 
     * @param svnWorkingCopyManager
     * @param env
     * @param content
     * @param isOnline
     * @return 
     */
    public static List<String> getBranchOrTagListByEnvConf(SVNWorkingCopyManager svnWorkingCopyManager, String env, String content, boolean isOnline) {
        try {
            List<String> branchList = new ArrayList<>();
            Map<String, Date> branchMap = svnWorkingCopyManager.getBranchOrTagListByEnvConf(env, content, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                branchList.add(entry.getKey());
            }
            return branchList;
        } catch (SVNException svne) {
            MessageUtil.showMessageDialogMessage(String.format("getBranchOrTagListByEnvConf error: ----------- %s", svne.getErrorMessage()));
            System.exit(-1);
        }

        return null;
    }

    public static List<String> getBranchOrTagListByEnvConf(SVNWorkingCopyManager svnWorkingCopyManager, String env, boolean isOnline) {
        try {
            List<String> branchList = new ArrayList<>();
            Map<String, Date> branchMap = svnWorkingCopyManager.getBranchOrTagListByEnvConf(env, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                branchList.add(entry.getKey());
            }
            return branchList;
        } catch (SVNException svne) {
            MessageUtil.showMessageDialogMessage(String.format("getBranchOrTagListByEnvConf error: ----------- %s", svne.getErrorMessage()));
            System.exit(-1);
        }

        return null;
    }

    public static String getLatestBranchOrTagListByEnvConf(SVNWorkingCopyManager svnWorkingCopyManager, String env, boolean isOnline) {
        try {
            Map<String, Date> branchMap = svnWorkingCopyManager.getBranchOrTagListByEnvConf(env, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                return entry.getKey();
            }
        } catch (SVNException svne) {
            MessageUtil.showMessageDialogMessage(String.format("getLatestBranchOrTagListByEnvConf error: ----------- %s", svne.getErrorMessage()));
        }

        return null;
    }

    /**
     * 将php分支更新到本地
     *
     * @param svnWorkingCopyManager
     * @param env
     * @param localPathKey
     */
    public void updatePHPBranchToLocal(SVNWorkingCopyManager svnWorkingCopyManager, String env, String localPathKey) {
        try {
            svnWorkingCopyManager.updateToLocalByEnvConf(localPathKey, env, SVNRevision.HEAD, SVNDepth.INFINITY, false, false);
        } catch (SVNException ex) {
            MessageUtil.showMessageDialogMessage(String.format("updatePHPBranchToLocal '" + env + "': '" + localPathKey + "'  error: -----------%s", ex.getErrorMessage()));
            System.exit(-1);
        }
    }

    /**
     * 将php分支内容提交到服务器
     *
     * @param svnWorkingCopyManager
     * @param wcDir
     * @param commitMessage
     * @param needAdd
     */
    public void commitPHPBranch(SVNWorkingCopyManager svnWorkingCopyManager, String wcDir, String commitMessage, boolean needAdd) {
        try {
            svnWorkingCopyManager.commit(new File(wcDir), false, commitMessage, true);
        } catch (SVNException ex) {
            Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtil.showMessageDialogMessage(String.format("commitPHPBranch  wcDir:'%s'  error: -----------%s", wcDir, ex.getErrorMessage()));
            System.exit(-1);
        }
    }

    /**
     * 将php分支内容提交到服务器
     *
     * @param svnWorkingCopyManager
     * @param wcDir
     * @param commitMessage
     */
    public void commitPHPBranch(SVNWorkingCopyManager svnWorkingCopyManager, String wcDir, String commitMessage) {
        try {
            svnWorkingCopyManager.commit(new File(wcDir), false, commitMessage, true);
        } catch (SVNException ex) {
            Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtil.showMessageDialogMessage(String.format("commitPHPBranch  wcDir:'%s'  error: -----------%s", wcDir, ex.getErrorMessage()));
            System.exit(-1);
        }
    }

    /**
     * 同步文件
     *
     * @param originDir
     * @param dstDir
     */
    public void syncFile(String originDir, String dstDir) {
        Map<String, String> args = buildFileSyncArgs(originDir, dstDir);
        Sync.syncMain(args);
    }

    public void syncFile(String originDir, String dstDir, boolean simulateOnly) {
        Map<String, String> args = buildFileSyncArgs(originDir, dstDir);

        if (simulateOnly) {
            args.put("simulate", "1");
            args.remove("force");
        }
        Sync.syncMain(args);
    }

    /**
     *
     * @param envList
     * @param contentList
     * @param versionTagMap
     * @param phpSyncMap
     * @return
     */
    private boolean isSyncValid(List<String> envList, List<String> contentList, Map<String, String> versionTagMap, Map<String, String> phpSyncMap) {
        if (0 == envList.size()) {
            MessageUtil.showMessageDialogMessage("请选择需要同步的环境");
            return false;
        }

//        todo
//        if (phpSyncMap.get("origin").trim().isEmpty()) {
//            MessageUtil.showMessageDialogMessage("请输入 '源PHPtag'");
//            return;
//        }
//        if (phpSyncMap.get("dest").trim().isEmpty()) {
//            MessageUtil.showMessageDialogMessage("请输入 '目的PHPtag'");
//            return;
//        }
        return true;
    }

    private void syncResourcesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncResourcesjButtonActionPerformed
        syncTemplate("resources", "syncResourcesjButton");
    }//GEN-LAST:event_syncResourcesjButtonActionPerformed

    private void syncTemplate(final String content, final String buttonName) {
        disableAllButton();
        new Thread(new Runnable() {
            @Override
            public void run() {
                List<String> envList = getEnv();
                int envCount = envList.size();
                String env;
                if (0 == envCount) {
                    MessageUtil.showMessageDialogMessage("请选择需要同步的环境");
                    return;
                }

                for (int envNo = 0; envNo < envCount; envNo++) {
                    env = envList.get(envNo);
                    SVNWorkingCopyManager svnWorkingCopyManager;//new WorkingCopyImprove(env);

                    String special = "local";
                    String localContentPathKey = String.format("%s.%s.sysfile.path", content, special);
                    svnWorkingCopyManager = new SVNWorkingCopyManager(env, special, content);
                    String localContentPath = svnWorkingCopyManager.getProperties(env).get(localContentPathKey).toString();
                    updatePHPBranchToLocal(svnWorkingCopyManager, env, localContentPathKey);//更新 content  local 

                    special = "online";
                    String onlineContentPathKey = String.format("%s.%s.sysfile.path", content, special);
                    svnWorkingCopyManager = new SVNWorkingCopyManager(env, special, content);
                    String onlineContentPath = svnWorkingCopyManager.getProperties(env).get(onlineContentPathKey).toString();
                    updatePHPBranchToLocal(svnWorkingCopyManager, env, onlineContentPathKey);//更新 content  online 

                    //将 content local 的内容同步到 content online 
                    Map<String, String> args;
                    args = buildFileSyncArgs(localContentPath, onlineContentPath);
                    Sync.syncMain(args);

                    //更新content online svn
//                    commitPHPBranch(wc, onlineContentPath, "commit by DeploymentSvnForDS");
//            commitPHPBranch(env, onlineContentPath, "commit by DeploymentSvnForDS");
                    changeButtonEnableExcept(buttonName);
                }
            }
        }).start();
    }

    private int selectedCheckboxCount = 0;

    private void syncFlashjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncFlashjButtonActionPerformed
        if (isEnvSelected()) {//需要同步flash
            syncTemplate("flash", "syncFlashjButton");
        } else {//没有选择需要同步flash的相关环境，直接报错
            MessageUtil.showMessageDialogMessage("请选择需要同步flash的环境");
        }
    }//GEN-LAST:event_syncFlashjButtonActionPerformed

    /**
     * 是否有某个环境已经被选择了
     *
     * @return
     */
    private boolean isEnvSelected() {
        return (fBEnUsJCheckBox.isSelected() || fBFrfrJCheckBox.isSelected() || fBDedeJCheckBox.isSelected() || aGEnUsJCheckBox.isSelected() || kGEnUsJCheckBox.isSelected());
    }

    /**
     * 计算被选择环境的个数
     *
     * @return
     */
    private int calcCheckBoxCount() {
        selectedCheckboxCount = 0;
        if (fBEnUsJCheckBox.isSelected()) {
            selectedCheckboxCount += 1;
        }
        if (fBFrfrJCheckBox.isSelected()) {
            selectedCheckboxCount += 1;
        }
        if (fBDedeJCheckBox.isSelected()) {
            selectedCheckboxCount += 1;
        }
        if (aGEnUsJCheckBox.isSelected()) {
            selectedCheckboxCount += 1;
        }
        if (kGEnUsJCheckBox.isSelected()) {
            selectedCheckboxCount += 1;
        }

        return selectedCheckboxCount;
    }

    private void initSpecialComboBoxModelList(final String env, final javax.swing.JComboBox jComboBox) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String localOrOnline = "online";
                String contentType = "php";
                SVNWorkingCopyManager svnWorkingCopyManager = new SVNWorkingCopyManager(env, localOrOnline, contentType);
                List<String> phpTagList = getBranchOrTagListByEnvConf(svnWorkingCopyManager, env, contentType, true);
                List<String> finalFlashList = new ArrayList<>();
                for (String branch : phpTagList) {
                    if (branch.startsWith("v") || !branch.isEmpty()) {//todo 这个需要修改 现在试试为了而测试。。。。。
                        finalFlashList.add(branch);
                    }
                }
                if (phpTagList.size() > 0) {
                    String[] items = finalFlashList.toArray(new String[]{});
                    jComboBox.setModel(new DefaultComboBoxModel(items));
                    items = null;
                }
                phpTagList = null;
                localOrOnline = null;
                contentType = null;
                svnWorkingCopyManager = null;
                finalFlashList = null;
                envInitStatusMap.put(env, "YES");
            }
        }).start();
    }

    /**
     *
     * @param checkboxName
     */
    private void initRelativeComboBoxModelList(String env) {
        switch (env) {
            case "fb_en_us":
                if (envInitStatusMap != null && envInitStatusMap.get(env).equals("NO")) {
                    initSpecialComboBoxModelList(env, FBEnUsJComboBox);
                }
                break;
            case "kg_en_us":
                if (envInitStatusMap != null && envInitStatusMap.get(env).equals("NO")) {
                    initSpecialComboBoxModelList(env, KGEnUsJComboBox);
                }
                break;
            case "fb_de_de":
                if (envInitStatusMap != null && envInitStatusMap.get(env).equals("NO")) {
                    initSpecialComboBoxModelList(env, FBDedeJComboBox);
                }
                break;
            case "ag_en_us":
                if (envInitStatusMap != null && envInitStatusMap.get(env).equals("NO")) {
                    initSpecialComboBoxModelList(env, AGEnUsJComboBox);
                }
                break;
            case "fb_fr_fr":
                if (envInitStatusMap != null && envInitStatusMap.get(env).equals("NO")) {
                    initSpecialComboBoxModelList(env, FBFrfrJComboBox);
                }
                break;
            default:
                MessageUtil.showMessageDialogMessage("未知环境");
        }
    }


    private void commitResourcesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitResourcesjButtonActionPerformed
        disableAllButton();
        new Thread(new Runnable() {
            @Override
            public void run() {
                String special = "online";
                String content = "resources";
                List<String> envList = getEnv();
                String env = envList.get(0);
                String onlineContentPathKey = String.format("%s.%s.sysfile.path", content, special);
                SVNWorkingCopyManager svnWorkingCopyManager;
                svnWorkingCopyManager = new SVNWorkingCopyManager(env, special, content);
                String onlineContentPath = svnWorkingCopyManager.getProperties(env).get(onlineContentPathKey).toString();

                String commitLog = "commit resource to online env";
                int result = TortoiseProcUtil.commit(onlineContentPath, commitLog);

                changeButtonEnableExcept("commitFlashjButton");

                if (result == -1) {
                    System.out.println("commit canceled");
                } else if (result == 0) {
                    System.out.println("commit done!");
                }
            }
        }).start();
    }//GEN-LAST:event_commitResourcesjButtonActionPerformed

    private void commitFlashjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitFlashjButtonActionPerformed
        disableAllButton();
        new Thread(new Runnable() {
            @Override
            public void run() {
                String special = "online";
                String content = "flash";
                List<String> envList = getEnv();
                String env = envList.get(0);
                String onlineContentPathKey = String.format("%s.%s.sysfile.path", content, special);
                SVNWorkingCopyManager svnWorkingCopyManager;
                svnWorkingCopyManager = new SVNWorkingCopyManager(env, special, content);
                String onlineContentPath = svnWorkingCopyManager.getProperties(env).get(onlineContentPathKey).toString();
                String commitLog = "commit flash to online env";

                int result = TortoiseProcUtil.commit(onlineContentPath, commitLog);

                changeButtonEnableExcept("commitResourcesjButton");

                if (result == -1) {
                    System.out.println("commit canceled");
                } else if (result == 0) {
                    System.out.println("commit done!");
                }
            }
        }).start();
    }//GEN-LAST:event_commitFlashjButtonActionPerformed

    private void editConfjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConfjMenuItemActionPerformed
        ControllerJFrame.showEditPropConfJFrame();
    }//GEN-LAST:event_editConfjMenuItemActionPerformed

    private void syncResourcesjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncResourcesjMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_syncResourcesjMenuItemActionPerformed

    private void fBEnUsJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fBEnUsJCheckBoxActionPerformed
        initRelativeComboBoxModelList(fBEnUsJCheckBox.getName());
    }//GEN-LAST:event_fBEnUsJCheckBoxActionPerformed

    private void fBDedeJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fBDedeJCheckBoxActionPerformed
        initRelativeComboBoxModelList(fBDedeJCheckBox.getName());
    }//GEN-LAST:event_fBDedeJCheckBoxActionPerformed

    private void fBFrfrJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fBFrfrJCheckBoxActionPerformed
        initRelativeComboBoxModelList(fBFrfrJCheckBox.getName());
    }//GEN-LAST:event_fBFrfrJCheckBoxActionPerformed

    private void aGEnUsJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aGEnUsJCheckBoxActionPerformed
        initRelativeComboBoxModelList(aGEnUsJCheckBox.getName());
    }//GEN-LAST:event_aGEnUsJCheckBoxActionPerformed

    private void kGEnUsJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kGEnUsJCheckBoxActionPerformed
        initRelativeComboBoxModelList(kGEnUsJCheckBox.getName());
    }//GEN-LAST:event_kGEnUsJCheckBoxActionPerformed

    private void commitPHPjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitPHPjButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commitPHPjButtonActionPerformed

    private void syncPHPjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncPHPjButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_syncPHPjButtonActionPerformed

    private void testCommit() {
        SVNWorkingCopyManager svnWorkingCopyManager;//new WorkingCopyImprove(env);

        String special = "local";
        String content = "php";
        String env = "en_us";
        String localContentPathKey = String.format("%s.%s.sysfile.path", content, special);
        svnWorkingCopyManager = new SVNWorkingCopyManager(env, special, content);
        String localContentPath = svnWorkingCopyManager.getProperties(env).get(localContentPathKey).toString();
        commitPHPBranch(svnWorkingCopyManager, localContentPath, "commit by deploymentSvnForDS local ");
    }

    public void changeButtonEnableExcept(String buttonName) {
        switch (buttonName) {
            case "syncFlashjButton":
                syncResourcesjButton.setEnabled(true);
                commitResourcesjButton.setEnabled(true);
                commitFlashjButton.setEnabled(true);
                break;
            case "syncResourcesjButton":
                syncFlashjButton.setEnabled(true);
                commitResourcesjButton.setEnabled(true);
                commitFlashjButton.setEnabled(true);
                break;
            case "creatPHPTagjButton":
                syncFlashjButton.setEnabled(true);
                syncResourcesjButton.setEnabled(true);
                commitResourcesjButton.setEnabled(true);
                commitFlashjButton.setEnabled(true);
                break;
            case "commitResourcesjButton":
                syncResourcesjButton.setEnabled(true);
                syncFlashjButton.setEnabled(true);
                commitFlashjButton.setEnabled(true);
                break;
            case "commitFlashjButton":
                syncResourcesjButton.setEnabled(true);
                syncFlashjButton.setEnabled(true);
                commitResourcesjButton.setEnabled(true);
                break;
        }
    }

    private void enableAllButton(boolean exceptCommitButton) {
        syncFlashjButton.setEnabled(true);
        syncResourcesjButton.setEnabled(true);
        if (!exceptCommitButton) {
            commitResourcesjButton.setEnabled(true);
            commitFlashjButton.setEnabled(true);
        } else {
            commitResourcesjButton.setEnabled(false);
            commitFlashjButton.setEnabled(false);
        }

    }

    private void disableAllButton() {
        commitResourcesjButton.setEnabled(false);
        commitFlashjButton.setEnabled(false);
        syncFlashjButton.setEnabled(false);
        syncResourcesjButton.setEnabled(false);
    }

    private void printer() throws IOException {
        ConsoleTextArea consoleTextArea;

        try {
            consoleTextArea = new ConsoleTextArea();
            consoleTextArea.setFont(java.awt.Font.decode("monospaced"));
            consoleTextArea.setColumns(20);
            consoleTextArea.setRows(5);
            syncjScrollPane.setViewportView(consoleTextArea);
        } catch (IOException e) {
            System.err.println("cannot create LoopedStreams" + e);
            System.exit(1);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForTowerOfKingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DeploymentSvnForTowerOfKingJFrame ds = new DeploymentSvnForTowerOfKingJFrame();
                ds.setLocationRelativeTo(null);
                ds.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AGEnUsJComboBox;
    private javax.swing.JTextField AGEnUsJTextField;
    private javax.swing.JComboBox FBDedeJComboBox;
    private javax.swing.JComboBox FBEnUsJComboBox;
    private javax.swing.JTextField FBEnUsJTextField;
    private javax.swing.JComboBox FBFrfrJComboBox;
    private javax.swing.JTextField FBFrfrJTextField;
    private javax.swing.JComboBox KGEnUsJComboBox;
    private javax.swing.JTextField KGEnUsJTextField;
    private javax.swing.JCheckBox aGEnUsJCheckBox;
    private javax.swing.JButton commitFlashjButton;
    private javax.swing.JButton commitPHPjButton;
    private javax.swing.JButton commitResourcesjButton;
    private javax.swing.JPanel contentjPanel;
    private javax.swing.JMenuItem editConfjMenuItem;
    private javax.swing.JMenu editjMenu;
    private javax.swing.JPanel environmentjPanel;
    private javax.swing.JCheckBox fBDedeJCheckBox;
    private javax.swing.JCheckBox fBEnUsJCheckBox;
    private javax.swing.JCheckBox fBFrfrJCheckBox;
    private javax.swing.JMenu filejMenu;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox kGEnUsJCheckBox;
    private javax.swing.JButton syncFlashjButton;
    private javax.swing.JButton syncPHPjButton;
    private javax.swing.JButton syncResourcesjButton;
    private javax.swing.JMenuItem syncResourcesjMenuItem;
    private javax.swing.JScrollPane syncjScrollPane;
    // End of variables declaration//GEN-END:variables
}
