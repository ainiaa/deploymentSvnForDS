/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.coding91.ui;

import com.coding91.utility.PropertiesUtil;
import com.coding91.utility.SVNWorkingCopyManager;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.tmatesoft.svn.core.SVNDepth;
import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.wc.SVNRevision;
import sync.Sync;

/**
 *
 * @author Administrator
 */
public class DeploymentSvnForDSAllInOne extends javax.swing.JFrame {

    /**
     * Creates new form deploymentSvnForDSOLD
     */
    public DeploymentSvnForDSAllInOne() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(
                getClass().getClassLoader().getResource("resources/images/sync.png")));//这个不能以 '/'开头
        //下面的方式可以设置成功
//        ImageIcon iconImage = SwingResourceManager.getIcon(deploymentSvnForDS.class, "/resources/images/sync.png");
//        this.setIconImage(iconImage.getImage());
        initComponents();

        try {
            printer();
        } catch (IOException ex) {
            Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                String localOrOnline = "online";
                String contentType = "php";
                String langEnv = "en_us";
                SVNWorkingCopyManager wc = new SVNWorkingCopyManager(langEnv, localOrOnline, contentType);
                List<String> branchList = getBranchOrTagListByEnvConf(wc, langEnv, contentType, true);
                List<String> aBranchList = new ArrayList<>();
                List<String> bBranchList = new ArrayList<>();
                for (String branch : branchList) {
                    int dotLatestIndex = branch.lastIndexOf(".");
                    if (dotLatestIndex > 0) {
                        if (branch.substring(dotLatestIndex + 1).startsWith("1")) {//a版本
                            aBranchList.add(branch);
                        } else if (branch.substring(dotLatestIndex + 1).startsWith("2")) {//b版本
                            bBranchList.add(branch);
                        }
                    }
                }
                DefaultComboBoxModel<String> defaultComboBoxModel;
                if (aBranchList.size() > 0) {
                    String[] items = aBranchList.toArray(new String[]{});
                    defaultComboBoxModel = new DefaultComboBoxModel<>(items);
                    aOnlineTAGjComboBox.setModel(defaultComboBoxModel);
                } else {
                    String[] items = branchList.toArray(new String[]{});
                    defaultComboBoxModel = new DefaultComboBoxModel(items);
                    aOnlineTAGjComboBox.setModel(defaultComboBoxModel);
                }
                if (bBranchList.size() > 0) {
                    String[] items = bBranchList.toArray(new String[]{});
                    bOnlineTAGjComboBox.setModel(new DefaultComboBoxModel(items));
                } else {
                    String[] items = branchList.toArray(new String[]{});
                    bOnlineTAGjComboBox.setModel(new DefaultComboBoxModel(items));
                }

                aVersionTagjTextField.setText(aOnlineTAGjComboBox.getSelectedItem().toString());
                bVersionTagjTextField.setText(bOnlineTAGjComboBox.getSelectedItem().toString());

                bBranchList = null;
                aBranchList = null;
                branchList = null;
            }
        }).start();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        syncjButton = new javax.swing.JButton();
        syncjScrollPane = new javax.swing.JScrollPane();
        jToolBar1 = new javax.swing.JToolBar();
        dsjProgressBar = new javax.swing.JProgressBar();
        contentjPanel = new javax.swing.JPanel();
        contentResourcesjCheckBox = new javax.swing.JCheckBox();
        contentFlashjCheckBox = new javax.swing.JCheckBox();
        needSyncContentjCheckBox = new javax.swing.JCheckBox();
        environmentjPanel = new javax.swing.JPanel();
        envENjCheckBox = new javax.swing.JCheckBox();
        envFRjCheckBox = new javax.swing.JCheckBox();
        envDEjCheckBox = new javax.swing.JCheckBox();
        envSPjCheckBox = new javax.swing.JCheckBox();
        envPTjCheckBox = new javax.swing.JCheckBox();
        envTWjCheckBox = new javax.swing.JCheckBox();
        phpTagjPanel = new javax.swing.JPanel();
        aVersionTagjLabel = new javax.swing.JLabel();
        aVersionTagjTextField = new javax.swing.JTextField();
        bVersionTagjLabel = new javax.swing.JLabel();
        bVersionTagjTextField = new javax.swing.JTextField();
        needCreatePHPTagjCheckBox = new javax.swing.JCheckBox();
        onlineTagjLabel = new javax.swing.JLabel();
        onlineTagjLabel1 = new javax.swing.JLabel();
        aOnlineTAGjComboBox = new javax.swing.JComboBox();
        bOnlineTAGjComboBox = new javax.swing.JComboBox();
        alwaysUserLatestPHPTagjCheckBox = new javax.swing.JCheckBox();
        canceljButton = new javax.swing.JButton();
        phpjPanel = new javax.swing.JPanel();
        originPHPTagjLabel = new javax.swing.JLabel();
        originPHPTagjTextField = new javax.swing.JTextField();
        dstPHPTagjLabel1 = new javax.swing.JLabel();
        dstPHPTagjTextField = new javax.swing.JTextField();
        needSyncPHPjCheckBox = new javax.swing.JCheckBox();
        jMenuBar = new javax.swing.JMenuBar();
        filejMenu = new javax.swing.JMenu();
        createPHPTagjMenuItem = new javax.swing.JMenuItem();
        syncResourcesjMenuItem = new javax.swing.JMenuItem();
        syncFlashjMenuItem = new javax.swing.JMenuItem();
        syncPHPjMenuItem = new javax.swing.JMenuItem();
        editjMenu = new javax.swing.JMenu();
        editConfjMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        syncjButton.setText("开始同步");
        syncjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncjButtonActionPerformed(evt);
            }
        });

        syncjScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步结果", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(255, 0, 255))); // NOI18N
        syncjScrollPane.setAutoscrolls(true);

        jToolBar1.setRollover(true);
        jToolBar1.add(dsjProgressBar);

        contentjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步内容", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(153, 51, 255))); // NOI18N

        contentResourcesjCheckBox.setSelected(true);
        contentResourcesjCheckBox.setText("resources");

        contentFlashjCheckBox.setSelected(true);
        contentFlashjCheckBox.setText("flash");

        needSyncContentjCheckBox.setSelected(true);
        needSyncContentjCheckBox.setText(" 同步内容");
        needSyncContentjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                needSyncContentjCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentjPanelLayout = new javax.swing.GroupLayout(contentjPanel);
        contentjPanel.setLayout(contentjPanelLayout);
        contentjPanelLayout.setHorizontalGroup(
            contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentResourcesjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentFlashjCheckBox)
                .addGap(18, 18, 18)
                .addComponent(needSyncContentjCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentjPanelLayout.setVerticalGroup(
            contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentjPanelLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(contentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contentResourcesjCheckBox)
                    .addComponent(contentFlashjCheckBox)
                    .addComponent(needSyncContentjCheckBox)))
        );

        environmentjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步环境", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        envENjCheckBox.setSelected(true);
        envENjCheckBox.setText("英语");

        envFRjCheckBox.setSelected(true);
        envFRjCheckBox.setText("法语");

        envDEjCheckBox.setSelected(true);
        envDEjCheckBox.setText("德语");

        envSPjCheckBox.setText("西班牙语");

        envPTjCheckBox.setText("葡萄牙语");
        envPTjCheckBox.setEnabled(false);

        envTWjCheckBox.setText("繁体中文");

        javax.swing.GroupLayout environmentjPanelLayout = new javax.swing.GroupLayout(environmentjPanel);
        environmentjPanel.setLayout(environmentjPanelLayout);
        environmentjPanelLayout.setHorizontalGroup(
            environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(envENjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(envFRjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(envDEjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(envSPjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(envTWjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(envPTjCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        environmentjPanelLayout.setVerticalGroup(
            environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentjPanelLayout.createSequentialGroup()
                .addGroup(environmentjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(envENjCheckBox)
                    .addComponent(envFRjCheckBox)
                    .addComponent(envDEjCheckBox)
                    .addComponent(envSPjCheckBox)
                    .addComponent(envPTjCheckBox)
                    .addComponent(envTWjCheckBox))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        phpTagjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "创建 PHP Tag", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(255, 51, 153))); // NOI18N

        aVersionTagjLabel.setText("A版本tag：");

        bVersionTagjLabel.setText("B版本tag：");

        needCreatePHPTagjCheckBox.setSelected(true);
        needCreatePHPTagjCheckBox.setText(" 需要新建 PHP tag");
        needCreatePHPTagjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                needCreatePHPTagjCheckBoxActionPerformed(evt);
            }
        });

        onlineTagjLabel.setText("线上A版本 TAG：");

        onlineTagjLabel1.setText("线上B版本 TAG：");

        aOnlineTAGjComboBox.setEditable(true);

        bOnlineTAGjComboBox.setEditable(true);

        alwaysUserLatestPHPTagjCheckBox.setSelected(true);
        alwaysUserLatestPHPTagjCheckBox.setText("总是使用最新的tag");
        alwaysUserLatestPHPTagjCheckBox.setEnabled(false);
        alwaysUserLatestPHPTagjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysUserLatestPHPTagjCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout phpTagjPanelLayout = new javax.swing.GroupLayout(phpTagjPanel);
        phpTagjPanel.setLayout(phpTagjPanelLayout);
        phpTagjPanelLayout.setHorizontalGroup(
            phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phpTagjPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(phpTagjPanelLayout.createSequentialGroup()
                        .addComponent(onlineTagjLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bOnlineTAGjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(phpTagjPanelLayout.createSequentialGroup()
                        .addComponent(onlineTagjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aOnlineTAGjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(phpTagjPanelLayout.createSequentialGroup()
                        .addComponent(bVersionTagjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bVersionTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(phpTagjPanelLayout.createSequentialGroup()
                        .addComponent(aVersionTagjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aVersionTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(alwaysUserLatestPHPTagjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(needCreatePHPTagjCheckBox)
                .addGap(16, 16, 16))
        );
        phpTagjPanelLayout.setVerticalGroup(
            phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, phpTagjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, phpTagjPanelLayout.createSequentialGroup()
                        .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(needCreatePHPTagjCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alwaysUserLatestPHPTagjCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(phpTagjPanelLayout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(phpTagjPanelLayout.createSequentialGroup()
                                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(onlineTagjLabel)
                                    .addComponent(aOnlineTAGjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(onlineTagjLabel1)
                                    .addComponent(bOnlineTAGjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(phpTagjPanelLayout.createSequentialGroup()
                                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(aVersionTagjLabel)
                                    .addComponent(aVersionTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(phpTagjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bVersionTagjLabel)
                                    .addComponent(bVersionTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );

        canceljButton.setText("取消同步");
        canceljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canceljButtonActionPerformed(evt);
            }
        });

        phpjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "同步PHP", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 14), new java.awt.Color(0, 204, 204))); // NOI18N

        originPHPTagjLabel.setText("源PHPtag：");

        originPHPTagjTextField.setEnabled(false);
        originPHPTagjTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                originPHPTagjTextFieldFocusGained(evt);
            }
        });

        dstPHPTagjLabel1.setText("目的PHPtag：");

        dstPHPTagjTextField.setEnabled(false);

        needSyncPHPjCheckBox.setText(" 同步PHP");
        needSyncPHPjCheckBox.setEnabled(false);

        javax.swing.GroupLayout phpjPanelLayout = new javax.swing.GroupLayout(phpjPanel);
        phpjPanel.setLayout(phpjPanelLayout);
        phpjPanelLayout.setHorizontalGroup(
            phpjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phpjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(originPHPTagjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(originPHPTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(dstPHPTagjLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dstPHPTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(needSyncPHPjCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        phpjPanelLayout.setVerticalGroup(
            phpjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phpjPanelLayout.createSequentialGroup()
                .addGroup(phpjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(originPHPTagjLabel)
                    .addComponent(originPHPTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dstPHPTagjLabel1)
                    .addComponent(dstPHPTagjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(needSyncPHPjCheckBox))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        filejMenu.setText("文件");

        createPHPTagjMenuItem.setText("创建PHPTag");
        filejMenu.add(createPHPTagjMenuItem);

        syncResourcesjMenuItem.setText("同步resources");
        filejMenu.add(syncResourcesjMenuItem);

        syncFlashjMenuItem.setText("同步flash");
        syncFlashjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncFlashjMenuItemActionPerformed(evt);
            }
        });
        filejMenu.add(syncFlashjMenuItem);

        syncPHPjMenuItem.setText("同步PHP");
        filejMenu.add(syncPHPjMenuItem);

        jMenuBar.add(filejMenu);

        editjMenu.setText("编辑");

        editConfjMenuItem.setText("修改配置项");
        editjMenu.add(editConfjMenuItem);

        jMenuBar.add(editjMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(syncjScrollPane)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(environmentjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contentjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(phpTagjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(syncjButton)
                .addGap(45, 45, 45)
                .addComponent(canceljButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(phpjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(environmentjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(phpTagjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(phpjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(canceljButton)
                    .addComponent(syncjButton))
                .addGap(18, 18, 18)
                .addComponent(syncjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        syncjScrollPane.getAccessibleContext().setAccessibleName("sync result");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public List<String> getEnv() {
        List envList = new ArrayList<>();
        if (envENjCheckBox.isSelected()) {//英语
            envList.add("en_us");
        }
        if (envFRjCheckBox.isSelected()) {//法语
            envList.add("fr_fr");
        }
        if (envDEjCheckBox.isSelected()) {//德语
            envList.add("de_de");
        }
        if (envSPjCheckBox.isSelected()) {//西班牙语
            envList.add("sp_sp");
        }
        if (envPTjCheckBox.isSelected()) {//葡萄牙语
            envList.add("pt_pt");
        }
        return envList;
    }

    /**
     * 获得同步的内容
     *
     * @return
     */
    public List<String> getContent() {
        List contentList = new ArrayList<>();
        if (contentResourcesjCheckBox.isSelected()) {//resource
            contentList.add("resources");
        }
        if (contentFlashjCheckBox.isSelected()) {//flash
            contentList.add("flash");
        }
        return contentList;
    }

    /**
     * 获得 PHP tag号
     *
     * @return
     */
    public Map<String, String> getPHPTag() {
        Map versionTagMap = new HashMap<>();
        versionTagMap.put("a", aVersionTagjTextField.getText().trim());//a版本 tag号
        versionTagMap.put("b", bVersionTagjTextField.getText().trim());//b版本 tag号
        String bOriginTag, aOriginTag;
        if (alwaysUserLatestPHPTagjCheckBox.isSelected()) {
            aOriginTag = "";
            bOriginTag = "";
        } else {
            bOriginTag = bOnlineTAGjComboBox.getSelectedItem().toString().trim();
            aOriginTag = aOnlineTAGjComboBox.getSelectedItem().toString().trim();
        }

        versionTagMap.put("aonline", aOriginTag);//线上a版本 tag号
        versionTagMap.put("bonline", bOriginTag);//线上b版本 tag号
        return versionTagMap;
    }

    /**
     * 获得 PHP tag号
     *
     * @return
     */
    public Map<String, String> getPHPSync() {
        Map phpSyncMap = new HashMap<>();
        phpSyncMap.put("origin", originPHPTagjTextField.getText().trim());//源php tag号
        phpSyncMap.put("dest", dstPHPTagjTextField.getText().trim());//目标 tag号
        return phpSyncMap;
    }

    private static void showMessageDialogMessage(Exception ex) {
        String exMsg = ex.toString();
        JOptionPane.showMessageDialog(null, exMsg + new Throwable().getStackTrace()[1].toString(), "错误信息提示", JOptionPane.ERROR_MESSAGE);
    }

    private static void showMessageDialogMessage(String msg, String title) {
        JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    private static void showMessageDialogMessage(String msg) {
        JOptionPane.showMessageDialog(null, msg, "错误信息提示", JOptionPane.ERROR_MESSAGE);
    }

    private String getLocalPathKey(int version, boolean isOnline) {

        if (isOnline) {
            if (version == 0) {//a版本
                return "sysfile.php.aOnlinePath";
            } else if (version == 1) {//b版本
                return "sysfile.php.bOnlinePath";
            }
        } else {
            if (version == 0) {//a版本
                return "sysfile.php.aLocalPath";
            } else if (version == 1) {//b版本
                return "sysfile.php.bLocalPath";
            }
        }
        return "";
    }

    /**
     * 创建同步任务
     *
     * @param envList
     * @param contentList
     * @param versionTagMap
     * @param phpSyncMap
     */
    public void buildSyncTask(List<String> envList, List<String> contentList, Map<String, String> versionTagMap, Map<String, String> phpSyncMap) {
        int envCount = envList.size();
        int contentCount = contentList.size();
        String langEnv;
        for (int envNo = 0; envNo < envCount; envNo++) {
            langEnv = envList.get(envNo);
            String bOriginTag,bDstTag,aOriginTag,aDstTag;
            //创建b branch
            
            bDstTag = bVersionTagjTextField.getText().trim();

            SVNWorkingCopyManager workinigCopyManager = new SVNWorkingCopyManager(langEnv, "online", "php");
            if (alwaysUserLatestPHPTagjCheckBox.isSelected()) {//使用线上最新php来创建tag
                bOriginTag = getLatestBranchOrTagListByEnvConf(workinigCopyManager, langEnv, true);
            } else {
                bOriginTag = bOnlineTAGjComboBox.getSelectedItem().toString().trim();
            }
//            getBranchOrTagListByEnvConf(wc, env, true);
//            if (true) {
//                return;
//            }

            //b版本
            String rootUrl = PropertiesUtil.getPHPOnlineSvnUrl(langEnv);
            createPHPBranchOrTag(workinigCopyManager, bOriginTag, bDstTag, rootUrl);//创建 tag  b版本

            if (needCreateAVersionOfPHPBranch(langEnv)) {//需要创建 tag  a版本
                aDstTag = aVersionTagjTextField.getText().trim();
                aOriginTag = aOnlineTAGjComboBox.getSelectedItem().toString().trim();
                createPHPBranchOrTag(workinigCopyManager, aDstTag, aOriginTag, rootUrl);//创建 tag  a版本  
            }

            String path = PropertiesUtil.getPHPOnlinePath(langEnv);
            updatePHPBranchToLocal(workinigCopyManager, path);//将线上代码update到本地
            path = PropertiesUtil.getPHPLocalPath(langEnv);
            updatePHPBranchToLocal(workinigCopyManager, path);//将本地代码update到本地

            //同步 content
            for (int contentNo = 0; contentNo < contentCount; contentNo++) {
                String content = contentList.get(contentNo);
                String localPath = null, onlinePath = null;
                Map<String, String> args = null;
                switch (content) {
                    case "flash":
                        localPath = PropertiesUtil.getFlashLocalPath(langEnv);
                        onlinePath = PropertiesUtil.getFlashOnlinePath(langEnv);

                        //将 content local 的内容同步到 content online
                        args = buildFileSyncArgs(localPath, onlinePath);

                        break;
                    case "resources":
                        localPath = PropertiesUtil.getResourcesLocalPath(langEnv);
                        onlinePath = PropertiesUtil.getResourcesOnlinePath(langEnv);
                        //将 content local 的内容同步到 content online
                        args = buildFileSyncArgs(localPath, onlinePath);
                        break;
                }

                if (localPath != null && onlinePath != null && args != null) {
                    updatePHPBranchToLocal(workinigCopyManager, localPath);//将本地代码update到本地
                    updatePHPBranchToLocal(workinigCopyManager, onlinePath);//将本地代码update到本地
                    Sync.syncMain(args);
                    //更新content online svn
                    commitPHPBranch(workinigCopyManager, onlinePath, "commit by DeploymentSvnForDSAllInOne");
                }
            }
            //@TODO 同步php 这个还没有实现 
        }
    }

    private Map<String, String> buildFileSyncArgs(String source, String target) {
        Map<String, String> args = new HashMap<>();
        args.put("source", source);
        args.put("target", target);
        args.put("force", "y");
        args.put("customExclude", "{.git,.idea,.svn,.settings,.project,.buildpath}");//忽略.git,.idea,.svn,.settings,.project,.buildpath,configs文件      {.git,.idea,*.php} 忽略 .git  .idea 和 .php文件
        args.put("path", "1");
        return args;
    }

    /**
     * 是否需要创建 A 版本分支
     *
     * @param langEnv
     * @return
     */
    public boolean needCreateAVersionOfPHPBranch(String langEnv) {
        return PropertiesUtil.needCreateAVersionOfPHPBranch(langEnv);
    }

    /**
     * 创建PHP分支
     *
     * @param workinigCopyManager
     * @param originTag
     * @param dstTag
     * @param env
     * @param version
     */
    public static void createPHPBranchByTag(SVNWorkingCopyManager workinigCopyManager, String originTag, String dstTag, String env, int version) {
        try {
            String commitMessage = "remotely copying '" + originTag + "' to '" + dstTag + "'";
            workinigCopyManager.createBranchOrTagByEnvConf(env, originTag, dstTag, commitMessage, true, version);
        } catch (SVNException svne) {
            System.err.println("Copying '" + originTag + "' to '" + dstTag + "  error: -----------" + svne.getErrorMessage());
            System.exit(-1);
        }
    }

    public static void createPHPBranchOrTag(SVNWorkingCopyManager workinigCopyManager, String originTag, String dstTag, String rootUrl) {
        try {
            String commitMessage = "remotely copying '" + originTag + "' to '" + dstTag + "'";
            workinigCopyManager.createBranchOrTag(originTag, dstTag, commitMessage, rootUrl);
        } catch (SVNException svne) {
            System.err.println("Copying '" + originTag + "' to '" + dstTag + "  error: -----------" + svne.getErrorMessage());
            System.exit(-1);
        }
    }

    public static List<String> getBranchOrTagListByEnvConf(SVNWorkingCopyManager workinigCopyManager, String env, boolean isOnline) {
        try {
            List<String> branchList = new ArrayList<>();
            Map<String, Date> branchMap = workinigCopyManager.getBranchOrTagListByEnvConf(env, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                branchList.add(entry.getKey());
                System.out.println("getBranchOrTagListByEnvConf:" + entry.getValue());
            }
            return branchList;
        } catch (SVNException svne) {
            System.err.println("getBranchOrTagListByEnvConf error: ----------- " + svne.getErrorMessage());
            System.exit(-1);
        }

        return null;
    }

    public static String getLatestBranchOrTagListByEnvConf(SVNWorkingCopyManager workinigCopyManager, String env, boolean isOnline) {
        try {
            Map<String, Date> branchMap = workinigCopyManager.getBranchOrTagListByEnvConf(env, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                return entry.getKey();
            }
        } catch (SVNException svne) {
            System.err.println("getLatestBranchOrTagListByEnvConf error: ----------- " + svne.getErrorMessage());
        }

        return null;
    }

    /**
     * 将php分支更新到本地
     *
     * @param workingCopyManager
     * @param path
     */
    public void updatePHPBranchToLocal(SVNWorkingCopyManager workingCopyManager, String path) {
        try {
            workingCopyManager.updateToLocalByPath(path, SVNRevision.HEAD, SVNDepth.INFINITY, false, false);
        } catch (SVNException ex) {
            System.err.println("updatePHPBranchToLocal '" + path + "'  error: -----------" + ex.getErrorMessage());
            System.exit(-1);
        }
    }

    /**
     * 将php分支内容提交到服务器
     *
     * @param workinigCopyManager
     * @param wcDir
     * @param commitMessage
     */
    public void commitPHPBranch(SVNWorkingCopyManager workinigCopyManager, String wcDir, String commitMessage) {

        try {
            workinigCopyManager.commit(new File(wcDir), false, commitMessage, true);
        } catch (SVNException ex) {
            Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("commitPHPBranch  wcDir: " + wcDir + "'  error: -----------" + ex.getErrorMessage());
            System.exit(-1);
        }
    }

    /**
     * 同步文件
     *
     * @param originDir
     * @param dstDir
     */
    public void syncFile(String originDir, String dstDir) {
        Map<String, String> args = buildFileSyncArgs(originDir, dstDir);
        Sync.syncMain(args);
    }

    public void syncFile(String originDir, String dstDir, boolean simulateOnly) {
        Map<String, String> args = buildFileSyncArgs(originDir, dstDir);

        if (simulateOnly) {
            args.put("simulate", "1");
            args.remove("force");
        }
        Sync.syncMain(args);
    }


    private void originPHPTagjTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_originPHPTagjTextFieldFocusGained
        if (originPHPTagjTextField.getText().isEmpty() && !bVersionTagjTextField.getText().isEmpty()) {
            originPHPTagjTextField.setText(bVersionTagjTextField.getText());
        }
    }//GEN-LAST:event_originPHPTagjTextFieldFocusGained

    private void needCreatePHPTagjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_needCreatePHPTagjCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_needCreatePHPTagjCheckBoxActionPerformed

    /**
     *
     * @param envList
     * @param contentList
     * @param versionTagMap
     * @param phpSyncMap
     * @return
     */
    private boolean isSyncValid(List<String> envList, List<String> contentList, Map<String, String> versionTagMap, Map<String, String> phpSyncMap) {
        if (0 == envList.size()) {
            showMessageDialogMessage("请选择需要同步的环境");
            return false;
        }
        if (0 == contentList.size() && needSyncContentjCheckBox.isSelected()) {
            showMessageDialogMessage("请选择需要同步的内容。如果不需要同步内容，请取消 ‘需要同步内容’ 勾选");
            return false;
        }

        if (needCreatePHPTagjCheckBox.isSelected()) {//需要新建php tag 需要要输入a、b tag号
            if (versionTagMap.get("online").trim().isEmpty()) {
                showMessageDialogMessage("请输入 online  tag号。如果不需要新建 php tag 请取消 ‘需要新建 PHP tag’ 勾选");
                return false;
            }
            if (versionTagMap.get("a").trim().isEmpty()) {
                showMessageDialogMessage("请输入 A 版本tag号。如果不需要新建 php tag 请取消 ‘需要新建 PHP tag’ 勾选");
                return false;
            }
            if (versionTagMap.get("b").trim().isEmpty()) {
                showMessageDialogMessage("请输入 B 版本 tag 号。如果不需要新建 php tag 请取消 ‘ 需要新建 PHP tag’ 勾选");
                return false;
            }
        }

//        todo
//        if (phpSyncMap.get("origin").trim().isEmpty()) {
//            showMessageDialogMessage("请输入 '源PHPtag'");
//            return;
//        }
//        if (phpSyncMap.get("dest").trim().isEmpty()) {
//            showMessageDialogMessage("请输入 '目的PHPtag'");
//            return;
//        }
        return true;
    }

    private void syncjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncjButtonActionPerformed

//        if (true) {
//            syncFile("D:\\www\\framework", "D:\\www\\frameworkbak", true);
//            return;
//        }
        List<String> envList = getEnv();
        List<String> contentList = getContent();
        Map<String, String> versionTagMap = getPHPTag();
        Map<String, String> phpSyncMap = getPHPSync();
        if (!isSyncValid(envList, contentList, versionTagMap, phpSyncMap)) {
            return;
        }

        syncjButton.setEnabled(false);

        buildSyncTask(envList, contentList, versionTagMap, phpSyncMap);

//        Map<String, String> args = new HashMap<>();
//        args.put("source", "D:\\www\\framework");
//        args.put("target", "D:\\www\\frameworkbak");
//        args.put("force", "y");
//        Sync.syncMain(args);
//        createPHPBranch("svn://svndev.shinezone.com/dev/Dessert_Shop/facebook/branches/dev_greenhouse/", "svn://svndev.shinezone.com/dev/Dessert_Shop/facebook/branches/dev_greenhousebak", "en_us");
//        updatePHPBranchToLocal("en_us", "D:\\www\\dessert\\code\\branches");

    }//GEN-LAST:event_syncjButtonActionPerformed

    private void canceljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canceljButtonActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null, "你确定要取消同步？", "取消同步提示", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == dialogResult) {
            this.dispose();
            System.exit(1);
        }
    }//GEN-LAST:event_canceljButtonActionPerformed

    private void syncFlashjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncFlashjMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_syncFlashjMenuItemActionPerformed

    private void needSyncContentjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_needSyncContentjCheckBoxActionPerformed
        if (!needSyncContentjCheckBox.isSelected()) {
            contentFlashjCheckBox.setSelected(false);
            contentResourcesjCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_needSyncContentjCheckBoxActionPerformed

    private void alwaysUserLatestPHPTagjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysUserLatestPHPTagjCheckBoxActionPerformed
        JCheckBox thisCheckBox = (JCheckBox) (evt.getSource());
        if (thisCheckBox.isSelected()) {
            aOnlineTAGjComboBox.setEnabled(false);
            bOnlineTAGjComboBox.setEnabled(false);
        } else {
            aOnlineTAGjComboBox.setEnabled(true);
            bOnlineTAGjComboBox.setEnabled(true);
            if (aOnlineTAGjComboBox.getItemCount() < 1) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String localOrOnline = "online";
                        String contentType = "php";
                        String langEnv = "en_us";
                        SVNWorkingCopyManager workingCopyManager = new SVNWorkingCopyManager(langEnv, localOrOnline, contentType);
                        List<String> branchList = getBranchOrTagListByEnvConf(workingCopyManager, langEnv, contentType, true);
                        List<String> aBranchList = new ArrayList<>();
                        List<String> bBranchList = new ArrayList<>();
                        for (String branch : branchList) {
                            int dotLatestIndex = branch.lastIndexOf(".");
                            if (dotLatestIndex > 0) {
                                if (branch.substring(dotLatestIndex + 1).startsWith("1")) {//a版本
                                    aBranchList.add(branch);
                                } else if (branch.substring(dotLatestIndex + 1).startsWith("2")) {//b版本
                                    bBranchList.add(branch);
                                }
                            }
                        }
                        DefaultComboBoxModel<String> defaultComboBoxModel;
                        if (aBranchList.size() > 0) {
                            String[] items = aBranchList.toArray(new String[]{});
                            defaultComboBoxModel = new DefaultComboBoxModel<>(items);
                            aOnlineTAGjComboBox.setModel(defaultComboBoxModel);
                        } else {
                            String[] items = branchList.toArray(new String[]{});
                            defaultComboBoxModel = new DefaultComboBoxModel(items);
                            aOnlineTAGjComboBox.setModel(defaultComboBoxModel);
                        }
                        if (bBranchList.size() > 0) {
                            String[] items = bBranchList.toArray(new String[]{});
                            bOnlineTAGjComboBox.setModel(new DefaultComboBoxModel(items));
                        } else {
                            String[] items = branchList.toArray(new String[]{});
                            bOnlineTAGjComboBox.setModel(new DefaultComboBoxModel(items));
                        }

                        bBranchList = null;
                        aBranchList = null;
                        branchList = null;
                    }
                }).start();
            }
        }
    }//GEN-LAST:event_alwaysUserLatestPHPTagjCheckBoxActionPerformed

    public static List<String> getBranchOrTagListByEnvConf(SVNWorkingCopyManager workingCopyManager, String langEnv, String contentType, boolean isOnline) {
        try {
            List<String> branchList = new ArrayList<>();
            Map<String, Date> branchMap = workingCopyManager.getBranchOrTagListByEnvConf(langEnv, contentType, isOnline);
            for (Map.Entry<String, Date> entry : branchMap.entrySet()) {
                branchList.add(entry.getKey());
            }
            return branchList;
        } catch (SVNException svne) {
            System.err.println("getBranchOrTagListByEnvConf error: ----------- " + svne.getErrorMessage());
            System.exit(-1);
        }

        return null;
    }

    private boolean isEnvSelected() {
        return (envENjCheckBox.isSelected() || envFRjCheckBox.isSelected() || envDEjCheckBox.isSelected());
    }

    private void printer() throws IOException {
        ConsoleTextArea consoleTextArea = null;

        try {
            consoleTextArea = new ConsoleTextArea();
        } catch (IOException e) {
            System.err.println("cannot create LoopedStreams" + e);
            System.exit(1);
        }

        consoleTextArea.setFont(java.awt.Font.decode("monospaced"));
        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        syncjScrollPane.setViewportView(consoleTextArea);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeploymentSvnForDSAllInOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeploymentSvnForDSAllInOne().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox aOnlineTAGjComboBox;
    private javax.swing.JLabel aVersionTagjLabel;
    private javax.swing.JTextField aVersionTagjTextField;
    private javax.swing.JCheckBox alwaysUserLatestPHPTagjCheckBox;
    private javax.swing.JComboBox bOnlineTAGjComboBox;
    private javax.swing.JLabel bVersionTagjLabel;
    private javax.swing.JTextField bVersionTagjTextField;
    private javax.swing.JButton canceljButton;
    private javax.swing.JCheckBox contentFlashjCheckBox;
    private javax.swing.JCheckBox contentResourcesjCheckBox;
    private javax.swing.JPanel contentjPanel;
    private javax.swing.JMenuItem createPHPTagjMenuItem;
    private javax.swing.JProgressBar dsjProgressBar;
    private javax.swing.JLabel dstPHPTagjLabel1;
    private javax.swing.JTextField dstPHPTagjTextField;
    private javax.swing.JMenuItem editConfjMenuItem;
    private javax.swing.JMenu editjMenu;
    private javax.swing.JCheckBox envDEjCheckBox;
    private javax.swing.JCheckBox envENjCheckBox;
    private javax.swing.JCheckBox envFRjCheckBox;
    private javax.swing.JCheckBox envPTjCheckBox;
    private javax.swing.JCheckBox envSPjCheckBox;
    private javax.swing.JCheckBox envTWjCheckBox;
    private javax.swing.JPanel environmentjPanel;
    private javax.swing.JMenu filejMenu;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox needCreatePHPTagjCheckBox;
    private javax.swing.JCheckBox needSyncContentjCheckBox;
    private javax.swing.JCheckBox needSyncPHPjCheckBox;
    private javax.swing.JLabel onlineTagjLabel;
    private javax.swing.JLabel onlineTagjLabel1;
    private javax.swing.JLabel originPHPTagjLabel;
    private javax.swing.JTextField originPHPTagjTextField;
    private javax.swing.JPanel phpTagjPanel;
    private javax.swing.JPanel phpjPanel;
    private javax.swing.JMenuItem syncFlashjMenuItem;
    private javax.swing.JMenuItem syncPHPjMenuItem;
    private javax.swing.JMenuItem syncResourcesjMenuItem;
    private javax.swing.JButton syncjButton;
    private javax.swing.JScrollPane syncjScrollPane;
    // End of variables declaration//GEN-END:variables
}
